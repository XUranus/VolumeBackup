#ifndef VOLUMEBACKUP_VOLUME_COPY_MOUNT_PROVIDER_HEADER
#define VOLUMEBACKUP_VOLUME_COPY_MOUNT_PROVIDER_HEADER

#include "VolumeProtectMacros.h"

namespace volumeprotect {
namespace mount {

struct VolumeCopyMountConfig {
    // where files generated by mounting process created
    std::string     outputDirPath;
    // requiring a copy name to decide the name of copy meta json
    std::string     copyName;
    // directory path of the volume copy meta
    std::string     copyMetaDirPath;
    // directory path of the volume copy data
    std::string     copyDataDirPath;
    // mount target path.
    // For *nix loopback mount, the target directory must be created head
    // For Windows virtual disk mount, it can keep empty to retrieve a drive letter automatically
    std::string     mountTargetPath;

    // optional fields....
    // only used for *unix mount to sepecify filesystem type (option "-t", eg: ext4, xfs, btrfs...)
    std::string     mountFsType;
    // only used for *unix mount to sepecify mount options (option "-o", eg: "ro,loop,noatime")
    std::string     mountOptions;      
};

/**
 * function as base class for multple volume copy mount provider of different backup format
 * mount process takes a configuration from VolumeCopyMountConfig and may generate some magic file in outputDirPath
 * mounting process:
 *   1. validate directory path : outputDirPath, copyMetaDirPath, copyDataDirPath and mountTargetPath
 *   2. read copy meta json file with specified copyName and copyMetaDirPath
 *   3. extract copyMeta struct from json file content to decide which mount provider to load
 *   4. mount copy using corresponding provider
 *   5. save the mount record file to outputDirPath
 */
class VOLUMEPROTECT_API VolumeCopyMountProvider {
public:
    // factory function to load target copy mount provider, depending on which CopyFormat it is
    static std::unique_ptr<VolumeCopyMountProvider> BuildVolumeCopyMountProvider(
        VolumeCopyMountConfig& mountConfig
    );

    virtual ~VolumeCopyMountProvider() = default;

    virtual bool IsMountSupported();

    virtual bool Mount();
};

/**
 * function as base class for multple volume copy umount provider of different backup format
 * umount process read config from mountRecordJsonFilePath json file
 * umount process:
 *   1. validate json file mountRecordJsonFilePath and read mount record info
 *   2. deciding which umount provider to load
 *   3. umount copy using corresponding umount provider
 */
class VOLUMEPROTECT_API VolumeCopyUmountProvider {
public:
    static std::unique_ptr<VolumeCopyUmountProvider> BuildVolumeCopyUmountProvider(
        const std::string mountRecordJsonFilePath
    );

    virtual ~VolumeCopyUmountProvider() = default;

    virtual bool Umount();
};

}
}

#endif